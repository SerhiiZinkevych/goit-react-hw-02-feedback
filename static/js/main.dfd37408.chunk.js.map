{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","components/App.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","FeedbackOptions","options","onLeaveFeedback","map","option","key","type","name","onClick","Section","title","children","Notification","message","App","state","handleClick","e","target","setState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","Object","keys","this","Component","ReactDOM","render","document","getElementById"],"mappings":"0SAqBeA,EAlBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OACjB,oCACE,oCAAUJ,GACV,uCAAaC,GACb,mCAASC,GACT,qCAAWC,GACX,iDAAuBC,EAAvB,OCcWC,EApBS,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAASC,EAAZ,EAAYA,gBAAZ,OACtB,oCACGD,EAAQE,KAAI,SAAAC,GAAM,OACjB,4BACEC,IAAKD,EACLE,KAAK,SACLC,KAAMH,EACNI,QAASN,GAERE,QCEMK,EAXC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,SAAV,OACd,iCACE,4BAAKD,GACJC,ICCUC,EAJM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAAiB,2BAAIA,ICGrBC,E,2MACnBC,MAAQ,CACNpB,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPmB,YAAc,SAAAC,GACZ,IAAMV,EAAOU,EAAEC,OAAOX,KACtB,EAAKY,UAAS,SAAAJ,GAAK,sBACdA,EADc,eAEhBR,EAAO,EAAKQ,MAAMR,GAAQ,Q,EAI/Ba,mBAAqB,kBACnB,EAAKL,MAAMpB,KAAO,EAAKoB,MAAMnB,QAAU,EAAKmB,MAAMlB,K,EAEpDwB,gCAAkC,kBAChC,EAAKN,MAAMpB,KACP2B,KAAKC,MAAO,EAAKR,MAAMpB,KAAO,EAAKyB,qBAAwB,KAC3D,G,wEAGJ,OACE,oCACE,kBAAC,EAAD,CAASV,MAAM,yBACb,kBAAC,EAAD,CACET,QAASuB,OAAOC,KAAKC,KAAKX,OAC1Bb,gBAAiBwB,KAAKV,eAGzBU,KAAKN,qBACJ,kBAAC,EAAD,CAASV,MAAM,cACb,kBAAC,EAAD,CACEf,KAAM+B,KAAKX,MAAMpB,KACjBC,QAAS8B,KAAKX,MAAMnB,QACpBC,IAAK6B,KAAKX,MAAMlB,IAChBC,MAAO4B,KAAKN,qBACZrB,mBAAoB2B,KAAKL,qCAI7B,kBAAC,EAAD,CAAcR,QAAQ,2B,GA3CCc,aCDjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.dfd37408.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => (\n  <>\n    <p>Good: {good}</p>\n    <p>Neutral: {neutral}</p>\n    <p>Bad: {bad}</p>\n    <p>Total: {total}</p>\n    <p>Positive feedback: {positivePercentage}%</p>\n  </>\n);\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => (\n  <>\n    {options.map(option => (\n      <button\n        key={option}\n        type=\"button\"\n        name={option}\n        onClick={onLeaveFeedback}\n      >\n        {option}\n      </button>\n    ))}\n  </>\n);\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired\n};\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => (\n  <section>\n    <h2>{title}</h2>\n    {children}\n  </section>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => <p>{message}</p>;\nNotification.propTypes = {\n  message: PropTypes.string.isRequired\n};\nexport default Notification;\n","import React, { Component } from \"react\";\nimport Statistics from \"./Statistics\";\nimport FeedbackOptions from \"./FeedbackOptions\";\nimport Section from \"./Section\";\nimport Notification from \"./Notification\";\n\nexport default class App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0\n  };\n\n  handleClick = e => {\n    const name = e.target.name;\n    this.setState(state => ({\n      ...state,\n      [name]: this.state[name] + 1\n    }));\n  };\n\n  countTotalFeedback = () =>\n    this.state.good + this.state.neutral + this.state.bad;\n\n  countPositiveFeedbackPercentage = () =>\n    this.state.good\n      ? Math.round((this.state.good / this.countTotalFeedback()) * 100)\n      : 0;\n\n  render() {\n    return (\n      <>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={Object.keys(this.state)}\n            onLeaveFeedback={this.handleClick}\n          />\n        </Section>\n        {this.countTotalFeedback() ? (\n          <Section title=\"Statistics\">\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={this.countTotalFeedback()}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            />\n          </Section>\n        ) : (\n          <Notification message=\"No feedback given\" />\n        )}\n      </>\n    );\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}